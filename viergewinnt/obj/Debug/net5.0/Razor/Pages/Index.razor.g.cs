#pragma checksum "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8260ef67a01aaa60611d42e42b156d1bbebf6955"
// <auto-generated/>
#pragma warning disable 1591
namespace viergewinnt.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\_Imports.razor"
using viergewinnt;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\_Imports.razor"
using viergewinnt.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
using viergewinnt.Model;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenElement(0, "div");
            __builder.AddAttribute(1, "class", "container");
            __builder.AddAttribute(2, "b-7h4uufut54");
            __builder.AddMarkupContent(3, "<h1 b-7h4uufut54>Connect Four</h1>");
#nullable restore
#line 7 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
     if (WinPlay == null)
    {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(4, "h2");
            __builder.AddAttribute(5, "b-7h4uufut54");
            __builder.AddContent(6, 
#nullable restore
#line 9 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
             currentTurn

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(7, "\'s Turn!");
            __builder.CloseElement();
#nullable restore
#line 10 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
    
    }
    else
    {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(8, "h2");
            __builder.AddAttribute(9, "b-7h4uufut54");
            __builder.AddContent(10, 
#nullable restore
#line 14 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
             WinPlay.WinColor

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(11, " Wins! ");
            __builder.OpenElement(12, "button");
            __builder.AddAttribute(13, "class", "btn btn-primary");
            __builder.AddAttribute(14, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 14 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
                                                                                () => Reset()

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(15, "b-7h4uufut54");
            __builder.AddContent(16, "Reset");
            __builder.CloseElement();
            __builder.CloseElement();
#nullable restore
#line 15 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
    }

#line default
#line hidden
#nullable disable
            __builder.OpenElement(17, "div");
            __builder.AddAttribute(18, "class", "board");
            __builder.AddAttribute(19, "b-7h4uufut54");
#nullable restore
#line 18 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
         for (int i = 0; i < 10; i++)
        {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(20, "div");
            __builder.AddAttribute(21, "class", "column");
            __builder.AddAttribute(22, "b-7h4uufut54");
#nullable restore
#line 21 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
                 for (int j = 0; j < 7; j++)
                {
                    int x = i;
                    int y = j;

#line default
#line hidden
#nullable disable
            __builder.OpenElement(23, "div");
            __builder.AddAttribute(24, "class", "GameToken" + "\r\n                             " + (
#nullable restore
#line 26 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
                              board.Board[i,j].Color.ToString().ToLower()

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(25, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 26 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
                                                                                       () => GameTokenClicked(x,y)

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(26, "style", 
#nullable restore
#line 27 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
                                  IsGameTokenAWinningToken(WinPlay, i, j)? "opacity: 0.6" : ""

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(27, "b-7h4uufut54");
            __builder.CloseElement();
#nullable restore
#line 28 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
                }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
#nullable restore
#line 30 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
        }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(28, "\r\n\r\n");
            __builder.AddMarkupContent(29, "<footer b-7h4uufut54>By <a href=\"https://github.com/d-kaufmann\" b-7h4uufut54>David Kaufmann</a> and <a href=\"https://github.com/FlorianRauchberger\" b-7h4uufut54>Florian Rauchberger</a></footer>");
        }
        #pragma warning restore 1998
#nullable restore
#line 36 "C:\Users\serbi\Downloads\viergewinnt\viergewinnt\Pages\Index.razor"
       

    GameBoard board = new GameBoard();
    TokenColor currentTurn = TokenColor.Red;
    WinPlay WinPlay;

    private void GameTokenClicked(int x, int y)
    {
        if (WinPlay != null) { return; }

        GameToken clickedSpace = board.Board[x, y];

        if (clickedSpace.Color == TokenColor.Blank)
        {
            while (y < 6)
            {
                GameToken nextSpace = board.Board[x, y + 1];

                y = y + 1;
                if (nextSpace.Color == TokenColor.Blank)
                {
                    clickedSpace = nextSpace;
                }
            }
            clickedSpace.Color = currentTurn;

        }

        WinPlay = GetWinner();
        if (WinPlay == null)
        {
            SwitchTurns();
        }

    }
    private void SwitchTurns()
    {
        if (currentTurn == TokenColor.Red)
        {
            currentTurn = TokenColor.Yellow;
        }
        else
        {
            currentTurn = TokenColor.Red;
        }
    }

    private WinPlay GetWinner()
    {
        WinPlay WinPlay = null;

        for (int i = 0; i < 10; i++)
        {
            for (int j = 0; j < 7; j++)
            {
                WinPlay = EvaluateTokenForWinner(i, j, EDirection.Up);
                if (WinPlay != null) { return WinPlay; }

                WinPlay = EvaluateTokenForWinner(i, j, EDirection.UpRight);
                if (WinPlay != null) { return WinPlay; }

                WinPlay = EvaluateTokenForWinner(i, j, EDirection.Right);
                if (WinPlay != null) { return WinPlay; }

                WinPlay = EvaluateTokenForWinner(i, j, EDirection.DownRight);
                if (WinPlay != null) { return WinPlay; }
            }
        }

        return WinPlay;

    }
    private WinPlay EvaluateTokenForWinner(int i, int j, EDirection dir)
    {
        GameToken currentPiece = board.Board[i, j];
        if (currentPiece.Color == TokenColor.Blank)
        {
            return null;
        }

        int inARow = 1;
        int iNext = i;
        int jNext = j;

        var WinMoves = new List<string>();

        while (inARow < 4)
        {
            switch (dir)
            {
                case EDirection.Up:
                    jNext = jNext - 1;
                    break;
                case EDirection.UpRight:
                    iNext = iNext + 1;
                    jNext = jNext - 1;
                    break;
                case EDirection.Right:
                    iNext = iNext + 1;
                    break;
                case EDirection.DownRight:
                    iNext = iNext + 1;
                    jNext = jNext + 1;
                    break;
            }
            if (iNext < 0 || iNext >= 10 || jNext < 0 || jNext >= 7) { break; }
            if (board.Board[iNext, jNext].Color == currentPiece.Color)
            {
                WinMoves.Add($"{iNext},{jNext}");
                inARow++;
            }
            else
            {
                return null;
            }
        }

        if (inARow >= 4)
        {
            WinMoves.Add($"{i},{j}");

            return new WinPlay()
            {
                WinMoves = WinMoves,
                WinColor = currentPiece.Color,
                WinDirection = dir,
            };
        }

        return null;
    }
    private void Reset()
    {
        board = new GameBoard();
        currentTurn = TokenColor.Red;
        WinPlay = null;
    }

    private bool IsGameTokenAWinningToken(WinPlay WinPlay, int i, int j)
    {
        return WinPlay?.WinMoves?.Contains($"{i},{j}") ?? false;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
